{"version":3,"sources":["components/Home.js","components/About.js","components/Footer.js","components/Portfolio.js","components/Nav.js","components/Setting.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","About","Footer","Portfolio","match","useRouteMatch","ModalSwitch","url","location","useLocation","background","state","exact","path","children","Gallery","ImageView","Modal","IMAGES","id","title","color","Thumbnail","style","width","height","Image","to","map","i","key","pathname","useParams","image","parseInt","history","useHistory","back","e","stopPropagation","console","dir","goBack","onClick","position","top","left","bottom","right","padding","border","type","Nav","activeStyle","fontSize","handleClose","Setting","username","event","this","setState","target","value","isOpen","onChange","handleChangeName","React","Component","App","isSettingOpen","handleSettingButtonClick","bind","prevState","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e418bbc.chunk.js","sourcesContent":["// @flow\nimport * as React from 'react';\n\nexport const Home = (props) => {\n  return <div className=\"box content home\"></div>;\n};\n","// @flow\nimport * as React from 'react';\n\nexport const About = (props) => {\n  return (\n    <div className=\"box content\">\n      <h2>About</h2>\n      <p>\n        국무위원은 국정에 관하여 대통령을 보좌하며, 국무회의의 구성원으로서\n        국정을 심의한다. 선거와 국민투표의 공정한 관리 및 정당에 관한 사무를\n        처리하기 위하여 선거관리위원회를 둔다.\n      </p>\n    </div>\n  );\n};\n","// @flow\nimport * as React from 'react';\n\nexport const Footer = (props) => {\n  return <div className=\"box footer\">this is Footer</div>;\n};\n","// @flow\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from 'react-router-dom';\n\nexport const Portfolio = (props) => {\n  let match = useRouteMatch();\n  return (\n    <Router>\n      <ModalSwitch url={match.url} />\n    </Router>\n  );\n};\nfunction ModalSwitch(props) {\n  let location = useLocation();\n\n  // This piece of state is set when one of the\n  // gallery links is clicked. The `background` state\n  // is the location that we were at when one of\n  // the gallery links was clicked. If it's there,\n  // use it as the location for the <Switch> so\n  // we show the gallery in the background, behind\n  // the modal.\n  let background = location.state && location.state.background;\n\n  return (\n    <div className=\"content\">\n      <Switch location={background || location}>\n        <Route\n          exact\n          path={`${props.url}/`}\n          children={<Home url={props.url} />}\n        />\n        <Route\n          path={`${props.url}gallery`}\n          children={<Gallery url={props.url} />}\n        />\n        <Route path={`${props.url}img/:id`} children={<ImageView />} />\n      </Switch>\n\n      {/* Show the modal when a background page is set */}\n      {background && (\n        <Route path={`${props.url}img/:id`} children={<Modal />} />\n      )}\n    </div>\n  );\n}\n\nconst IMAGES = [\n  { id: 0, title: 'Dark Orchid', color: 'DarkOrchid' },\n  { id: 1, title: 'Lime Green', color: 'LimeGreen' },\n  { id: 2, title: 'Tomato', color: 'Tomato' },\n  { id: 3, title: 'Seven Ate Nine', color: '#789' },\n  { id: 4, title: 'Crimson', color: 'Crimson' },\n];\n\nfunction Thumbnail({ color }) {\n  return (\n    <div\n      style={{\n        width: 50,\n        height: 50,\n        background: color,\n      }}\n    />\n  );\n}\n\nfunction Image({ color }) {\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: 400,\n        background: color,\n      }}\n    />\n  );\n}\n\nfunction Home(props) {\n  return (\n    <div>\n      <Link to={`${props.url}gallery`}>Visit the Gallery</Link>\n      <h2>Featured Images</h2>\n      <ul>\n        <li>\n          <Link to={`${props.url}img/2`}>Tomato</Link>\n        </li>\n        <li>\n          <Link to={`${props.url}img/4`}>Crimson</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nfunction Gallery(props) {\n  let location = useLocation();\n\n  return (\n    <div>\n      {IMAGES.map((i) => (\n        <Link\n          key={i.id}\n          to={{\n            pathname: `${props.url}img/${i.id}`,\n            // This is the trick! This link sets\n            // the `background` in location state.\n            state: { background: location },\n          }}\n        >\n          <Thumbnail color={i.color} />\n          <p>{i.title}</p>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nfunction ImageView() {\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10)];\n\n  if (!image) return <div>Image not found</div>;\n\n  return (\n    <div>\n      <h1>{image.title}</h1>\n      <Image color={image.color} />\n    </div>\n  );\n}\n\nfunction Modal() {\n  let history = useHistory();\n  let { id } = useParams();\n  let image = IMAGES[parseInt(id, 10)];\n\n  if (!image) return null;\n\n  let back = (e) => {\n    e.stopPropagation();\n    console.dir(history);\n    history.goBack();\n  };\n\n  return (\n    <div\n      onClick={back}\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        background: 'rgba(0, 0, 0, 0.15)',\n      }}\n    >\n      <div\n        className=\"modal\"\n        style={{\n          position: 'absolute',\n          background: '#fff',\n          top: 25,\n          left: '10%',\n          right: '10%',\n          padding: 15,\n          border: '2px solid #444',\n        }}\n      >\n        <h1>{image.title}</h1>\n        <Image color={image.color} />\n        <button type=\"button\" onClick={back}>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\nexport const Nav = (props) => {\n  const activeStyle = {\n    color: '#ffa601',\n    fontSize: '2rem',\n  };\n  return (\n    <nav className=\"box header\">\n      <ul className=\"menu-list\">\n        <li className=\"menu\">\n          <NavLink to=\"/home\" activeStyle={activeStyle}>\n            Home\n          </NavLink>\n        </li>\n        <li className=\"menu\">\n          <NavLink to=\"/about\" activeStyle={activeStyle}>\n            About\n          </NavLink>\n        </li>\n        <li className=\"menu\">\n          <NavLink to=\"/portfolio/\" activeStyle={activeStyle}>\n            Portfolio\n          </NavLink>\n        </li>\n      </ul>\n      <button onClick={props.handleClose}> Setting</button>\n    </nav>\n  );\n};\n","import React from 'react';\n\nclass Setting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n    };\n  }\n\n  handleChangeName(event) {\n    this.setState({\n      username: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className={this.props.isOpen ? 'mdl show' : 'mdl'}>\n        <div className=\"mdl-mask\" onClick={this.props.handleClose}></div>\n        <div className=\"sidebar\">\n          <h3>Setting</h3>\n          <hr />\n\n          <fieldset>\n            <legend>사용자 설정</legend>\n            <span className=\"small-margin-right\">사용자 이름</span>\n            <input\n              type=\"text\"\n              className=\"small-margin-right\"\n              value={this.state.username}\n              onChange={this.handleChangeName}\n            />\n            <button onClick={this.props.handleClose}>닫기</button>\n          </fieldset>\n\n          <hr />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Setting;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport { Home } from './components/Home';\nimport { About } from './components/About';\nimport { Footer } from './components/Footer';\nimport { Portfolio } from './components/Portfolio';\nimport { Nav } from './components/Nav';\nimport Setting from './components/Setting';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isSettingOpen: false,\n    };\n\n    this.handleSettingButtonClick = this.handleSettingButtonClick.bind(this);\n  }\n\n  handleSettingButtonClick() {\n    this.setState((prevState) => ({\n      isSettingOpen: !prevState.isSettingOpen,\n    }));\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"wrapper\">\n          <Setting\n            isOpen={this.state.isSettingOpen}\n            handleClose={this.handleSettingButtonClick}\n          ></Setting>\n          <Nav\n            isOpen={this.state.isSettingOpen}\n            handleClose={this.handleSettingButtonClick}\n          />\n          <Switch>\n            <Route path=\"/portfolio\">\n              <Portfolio />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/home\">\n              <Home />\n            </Route>\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}